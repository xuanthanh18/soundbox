<%= form_for(@micropost, html: { multipart: true }) do |f| %>
    <%= render 'shared/error_messages', object: f.object %>
    <div class="field">
      <%= f.text_area :content, placeholder: "Compose new post..." %>
    </div>

    Select a picture
  <span class="picture">
    <%= f.file_field :picture, accept: 'image/jpeg,image/gif,image/png' %>
  </span>

    Select an audio file
  <span class="audio">
    <%= f.file_field :audio, accept: 'audio/mpeg' %>
  </span>
<!--
    Record your own
    <div id="wrapper">
      <div>
        <a href="javascript:record()"  id="record" >Record</a>
        <a href="javascript:play()"    id="play"   >Play</a>
        <a href="javascript:stop()"    id="stop"   >Stop</a>
        <a href="javascript:upload()"  id="upload" >Upload </a>
      </div>

      <span id="url">0:00</span>
    </div>
-->
    Record your own voice

    <button onclick="startRecording(this);">record</button>
    <button onclick="stopRecording(this);" disabled>stop</button>

    <h2>Recordings</h2>
    <ul id="recordingslist"></ul>

    <pre hidden="true" id="log"></pre>

    <%= f.submit "Post", class: "btn btn-primary" %>

<% end %>

<script type="text/javascript">

    $('#micropost_picture').bind('change', function() {
        size_in_megabytes = this.files[0].size/1024/1024;
        if (size_in_megabytes > 2) {
            alert('Maximum file size is 5MB. Please choose a smaller file.');
        }
    });

    function upload(){
        document.getElementById("micropost_audio").value = "/Users/tempadmin/Downloads/horse.mp3";
        document.getElementById("url").innerHTML = document.getElementById("micropost_audio").value;
    }


    function __log(e, data) {
        log.innerHTML += "\n" + e + " " + (data || '');
    }

    var audio_context;
    var recorder;

    function startUserMedia(stream) {
        var input = audio_context.createMediaStreamSource(stream);
        __log('Media stream created.' );
        __log("input sample rate " +input.context.sampleRate);

        input.connect(audio_context.destination);
        __log('Input connected to audio context destination.');

        recorder = new Recorder(input);
        __log('Recorder initialised.');
    }

    function startRecording(button) {
        recorder && recorder.record();
        button.disabled = true;
        button.nextElementSibling.disabled = false;
        __log('Recording...');
    }

    function stopRecording(button) {
        recorder && recorder.stop();
        button.disabled = true;
        button.previousElementSibling.disabled = false;
        __log('Stopped recording.');

        // create WAV download link using audio data blob
        createDownloadLink();

        recorder.clear();
    }

    function createDownloadLink() {
        recorder && recorder.exportWAV(function(blob) {
            /*var url = URL.createObjectURL(blob);
             var li = document.createElement('li');
             var au = document.createElement('audio');
             var hf = document.createElement('a');

             au.controls = true;
             au.src = url;
             hf.href = url;
             hf.download = new Date().toISOString() + '.wav';
             hf.innerHTML = hf.download;
             li.appendChild(au);
             li.appendChild(hf);
             recordingslist.appendChild(li);*/
        });
    }

    window.onload = function init() {
        try {
            // webkit shim
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            navigator.getUserMedia = ( navigator.getUserMedia ||
                    navigator.webkitGetUserMedia ||
                    navigator.mozGetUserMedia ||
                    navigator.msGetUserMedia);
            window.URL = window.URL || window.webkitURL;

            audio_context = new AudioContext;
            __log('Audio context set up.');
            __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
        } catch (e) {
            alert('No web audio support in this browser!');
        }

        navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
            __log('No live audio input: ' + e);
        });
    };

</script>
